

const startStopBtn = document.getElementById('start-stop-btn');
const clearHistoryBtn = document.getElementById('clear-history');
const statusEl = document.getElementById('status');
const responseText = document.getElementById('response-text');
const historyEl = document.getElementById('history');
const toggleModeBtn = document.getElementById('toggle-mode');
const languageSelect = document.getElementById('language');

const huggingFaceApiKey = "    ";

const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = new SpeechRecognition();
recognition.interimResults = false;
recognition.lang = languageSelect.value;

let isListening = false;

toggleModeBtn.addEventListener('click', () => {
  document.body.classList.toggle('dark-mode');
});

languageSelect.addEventListener('change', () => {
  recognition.lang = languageSelect.value;
  statusEl.textContent = `‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: ${languageSelect.options[languageSelect.selectedIndex].text}`;
});

startStopBtn.addEventListener('click', () => {
  if (isListening) {
    recognition.stop();
  } else {
    recognition.start();
  }
});

recognition.onstart = () => {
  isListening = true;
  statusEl.textContent = '‡¶∂‡ßã‡¶®‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...';
  startStopBtn.textContent = '‚èπÔ∏è ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®';
};

recognition.onend = () => {
  isListening = false;
  statusEl.textContent = '‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...';
  startStopBtn.textContent = 'üéôÔ∏è ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®';
};

recognition.onerror = (e) => {
  statusEl.textContent = '‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ' + e.error;
};

recognition.onresult = async (event) => {
  const transcript = event.results[0][0].transcript;
  addToHistory(`üßë ‡¶Ü‡¶™‡¶®‡¶ø: ${transcript}`);
  statusEl.textContent = 'AI ‡¶≠‡¶æ‡¶¨‡¶õ‡ßá...';

  const aiReply = await getAIResponse(transcript);
  responseText.textContent = aiReply;
  addToHistory(`ü§ñ AI: ${aiReply}`);
  speak(aiReply);
  statusEl.textContent = '‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...';
};

function addToHistory(text) {
  const li = document.createElement('li');
  li.textContent = text;
  historyEl.appendChild(li);
  historyEl.scrollTop = historyEl.scrollHeight;
}

clearHistoryBtn.addEventListener('click', () => {
  historyEl.innerHTML = '';
  responseText.textContent = '';
  statusEl.textContent = '‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§';
});

async function getAIResponse(userInput) {
  try {
    const response = await fetch("https://api-inference.huggingface.co/models/gpt2", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${huggingFaceApiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        inputs: userInput
      })
    });

    const result = await response.json();
    console.log(result);

    if (result && result[0] && result[0].generated_text) {
      return result[0].generated_text.trim();
    } else {
      return "‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§";
    }
  } catch (error) {
    console.error(error);
    return "API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: " + error.message;
  }
}

function speak(text) {
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = /[\u0980-\u09FF]/.test(text) ? 'bn-BD' : 'en-US';
  window.speechSynthesis.speak(utterance);
}
